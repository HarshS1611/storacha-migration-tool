"use strict";(()=>{var e={};e.id=220,e.ids=[220,241],e.modules={1841:e=>{e.exports=require("@aws-sdk/client-s3")},5142:e=>{e.exports=require("dotenv")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6932:e=>{e.exports=import("@web3-storage/upload-client")},3543:e=>{e.exports=import("@web3-storage/upload-client/fetch-with-upload-progress")},5652:e=>{e.exports=import("@web3-storage/w3up-client")},2361:e=>{e.exports=require("events")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,a){return a in t?t[a]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,a)):"function"==typeof t&&"default"===a?t:void 0}}})},5694:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.r(t),a.d(t,{config:()=>d,default:()=>c,routeModule:()=>h});var o=a(1802),i=a(7153),n=a(6249),s=a(3298),l=e([s]);s=(l.then?(await l)():l)[0];let c=(0,n.l)(s,"default"),d=(0,n.l)(s,"config"),h=new o.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/migrate",pathname:"/api/migrate",bundlePath:"",filename:""},userland:s});r()}catch(e){r(e)}})},5829:(e,t,a)=>{a.d(t,{Q:()=>i});var r=a(2361);class o extends r.EventEmitter{constructor(){super(),this.startTime=new Date,this.progress={status:"preparing",phase:"preparing",percentage:0,totalFiles:0,completedFiles:0,failedFiles:0,remainingFiles:0,elapsedTime:0,totalBytes:0,processedBytes:0,bytesUploaded:0,uploadedSize:"0 B",downloadSpeed:0,uploadSpeed:0,estimatedTimeRemaining:"Calculating...",downloadedBytes:0,totalDownloadBytes:0,uploadedBytes:0,totalUploadBytes:0,errors:[]}}onProgress(e){this.progressCallback=e}onError(e){this.errorCallback=e}updateProgress(e){this.progress={...this.progress,...e},this.progressCallback&&this.progressCallback(this.progress)}updateFileProgress(e,t,a,r){"download"===r?(this.progress.downloadedBytes=t,this.progress.totalDownloadBytes=a):(this.progress.uploadedBytes=t,this.progress.totalUploadBytes=a),this.updateProgress(this.progress)}updateUploadProgress(e){this.updateProgress({uploadedBytes:e.loaded||0,totalUploadBytes:e.total||0,phase:e.phase,currentShardIndex:e.shardIndex,totalShards:e.totalShards,currentFile:e.currentFile})}emit(e,...t){return"error"===e&&this.errorCallback&&t.length>0&&this.errorCallback(t[0],t[1]),super.emit(e,...t)}close(){this.removeAllListeners()}}let i=o},3298:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.r(t),a.d(t,{default:()=>n});var o=a(5241),i=e([o]);async function n(e,t){if("POST"!==e.method)return t.status(405).json({error:"Method not allowed"});t.setHeader("Content-Type","text/event-stream"),t.setHeader("Cache-Control","no-cache"),t.setHeader("Connection","keep-alive"),t.setHeader("X-Accel-Buffering","no");let a=(e,a)=>{t.write(`data: ${JSON.stringify({type:e,data:a})}

`),t.flush?.()};try{let r;let{action:i,s3Config:n,pathKey:l,isDirectory:c,storachaConfig:d}=e.body;if(!n||!l||!d)return a("error",{message:"Missing required parameters"}),t.end();let h=[],g={info:e=>{let t={level:"info",message:e,timestamp:Date.now()};h.push(t),a("log",t)},warn:e=>{let t={level:"warn",message:e,timestamp:Date.now()};h.push(t),a("log",t)},error:e=>{let t={level:"error",message:e,timestamp:Date.now()};h.push(t),a("log",t)},debug:e=>{let t={level:"debug",message:e,timestamp:Date.now()};h.push(t),a("log",t)}},p=new o.StorachaMigrator({s3:{region:n.region,bucketName:n.bucketName,credentials:{accessKeyId:n.credentials.accessKeyId,secretAccessKey:n.credentials.secretAccessKey}},storacha:{email:d.email},retry:{maxAttempts:3,backoffMs:1e3,maxBackoffMs:1e4},batch:{concurrency:3,size:5}},void 0,g);if(p.onProgress(e=>{let t={...e,phase:e.downloadedBytes&&e.totalDownloadBytes&&e.downloadedBytes<e.totalDownloadBytes?"downloading":e.uploadedBytes&&e.totalUploadBytes&&e.uploadedBytes<e.totalUploadBytes?"uploading":"migrating"};if(a("progress",t),e.downloadedBytes&&e.totalDownloadBytes){let t=e.downloadedBytes/e.totalDownloadBytes*100;g.info(`⬇️ Downloading: ${t.toFixed(1)}% | ${s(e.downloadedBytes)}/${s(e.totalDownloadBytes)}`)}if(e.uploadedBytes&&e.totalUploadBytes){let t=e.uploadedBytes/e.totalUploadBytes*100;g.info(`⬆️ Uploading: ${t.toFixed(1)}% | ${s(e.uploadedBytes)}/${s(e.totalUploadBytes)}`)}}),g.info("\uD83D\uDEE0 Initializing Storacha client..."),await p.initialize(),g.info("✅ Initialization complete"),"migrateFileToStoracha"===i){let e=l.split("/").pop()||l;g.info(`📄 Migrating file: ${e}`),r=await p.migrateFile(l)}else{if("migrateDirectoryToStoracha"!==i)return g.error("Invalid action"),a("error",{message:"Invalid action"}),t.end();let e=l.split("/").filter(Boolean).pop()||l;g.info(`📁 Migrating directory: ${e}`),r=await p.migrateDirectory(l)}return r.success?(g.info(`✅ Migration completed successfully!`),g.info(`🔗 CID: ${r.cid}`),r.url&&g.info(`🌐 URL: ${r.url}`),r.size&&g.info(`📦 Size: ${s(r.size)}`),a("complete",{success:!0,cid:r.cid,url:r.url,size:r.size})):(g.error(r.error||"Migration failed"),a("error",{message:r.error||"Migration failed"})),t.end()}catch(e){return console.error("Error in migrate API:",e),a("error",{message:e instanceof Error?e.message:"Unknown error"}),t.end()}}function s(e){if(void 0===e||0===e)return"0 B";let t=Math.floor(Math.log(e)/Math.log(1024));return`${(e/Math.pow(1024,t)).toFixed(2)} ${["B","KB","MB","GB","TB"][t]}`}o=(i.then?(await i)():i)[0],r()}catch(e){r(e)}})},7153:(e,t)=>{var a;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return a}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(a||(a={}))},1802:(e,t,a)=>{e.exports=a(145)},5550:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.d(t,{c:()=>h});var o=a(7496),i=a(5829),n=a(3474),s=a(1476),l=a(1152),c=a(2202),d=e([o]);o=(d.then?(await d)():d)[0];class h{constructor(e,t,a){this.config=this.validateConfig(e),this.migrationOptions=t,this.logger=a||new s.M,this.connectionManager=new o.Y(e),this.eventManager=new i.Q,this.retryManager=new n.K(e.retry,this.logger),this.s3Service=new c.S(e.s3,this.eventManager),t?.progressCallback&&this.onProgress(t.progressCallback),t?.errorCallback&&this.onError(t.errorCallback)}async initialize(){await this.connectionManager.initializeConnections()}async close(){await this.connectionManager.closeConnections(),this.eventManager.close()}async migrateFile(e){return await this.retryManager.withRetry(async()=>{this.logger.info(`🔄 Migrating file: ${e}`);let t=new Date;this.eventManager.updateProgress({phase:"preparing",status:"preparing",startTime:t,currentFile:e,totalFiles:1,completedFiles:0}),this.connectionManager.getS3Connection();let a=this.connectionManager.getStorachaConnection();this.eventManager.updateProgress({phase:"download",status:"downloading"});let r=await this.s3Service.fetchFileFromS3(e);this.eventManager.updateProgress({phase:"upload",status:"uploading"});let o=await a.uploadToStoracha(r.buffer,r.fileName),i=new Date;return this.eventManager.updateProgress({status:o.success?"completed":"error",endTime:i,completedFiles:1,percentage:100}),this.eventManager.emit("fileComplete",e,o),o},`migrate file ${e}`)}async migrateDirectory(e){return await this.retryManager.withRetry(async()=>{this.logger.info(`📂 Migrating directory: ${e}`);let t=new Date;this.connectionManager.getS3Connection();let a=this.connectionManager.getStorachaConnection(),r=await this.s3Service.listFilesInS3Directory(e);if(0===r.length)throw Error("⚠️ No files found in directory");this.eventManager.updateProgress({totalFiles:r.length,completedFiles:0,percentage:0,phase:"preparing",status:"preparing",startTime:t,currentFile:e,remainingFiles:r.length,totalBatches:Math.ceil(r.length/(this.migrationOptions?.batchSize||this.config.batch.size))}),await new Promise(e=>setTimeout(e,100)),this.eventManager.updateProgress({phase:"download",status:"downloading"}),await new Promise(e=>setTimeout(e,100));let o=await this.s3Service.fetchFilesInBatches(r);await new Promise(e=>setTimeout(e,500)),this.eventManager.updateProgress({phase:"upload",status:"uploading"}),await new Promise(e=>setTimeout(e,100));let i=await a.uploadDirectoryToStoracha(o),n=new Date;return this.eventManager.updateProgress({completedFiles:r.length,percentage:100,phase:"preparing",status:i.success?"completed":"error",endTime:n,remainingFiles:0}),i},`migrate directory ${e}`)}onProgress(e){this.eventManager.onProgress(e)}onError(e){this.eventManager.onError(e)}async createSpace(){return await this.retryManager.withRetry(async()=>{let e=(0,l.p)();this.logger.info(`🏗 Creating new space: ${e}`);let t=this.connectionManager.getStorachaConnection();return await t.createNewStorachaSpace(e)},"create space")}async setSpace(e){return await this.retryManager.withRetry(async()=>{this.logger.info(`🔄 Setting current space to: ${e}`);let t=this.connectionManager.getStorachaConnection();return await t.setCurrentSpaceByDID(e)},`set space ${e}`)}validateConfig(e){if(!e.s3?.region)throw Error("S3 region is required");if(!e.retry?.maxAttempts)throw Error("Retry configuration is required");return e.batch?.size||(e.batch={size:5,concurrency:3}),e.batch?.concurrency||(e.batch.concurrency=3),e}}r()}catch(e){r(e)}})},5241:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.r(t),a.d(t,{StorachaMigrator:()=>o.c});var o=a(5550),i=e([o]);o=(i.then?(await i)():i)[0],r()}catch(e){r(e)}})},7496:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.d(t,{Y:()=>s});var o=a(1841),i=a(1029),n=e([i]);i=(n.then?(await n)():n)[0];class s{constructor(e){this.s3Connection=null,this.storachaConnection=null,this.config=e}async initializeConnections(){try{if(this.s3Connection=new o.S3Client({region:this.config.s3.region,credentials:this.config.s3.credentials}),!this.config.storacha.email)throw Error("Storacha email is required");let e=new i.K,t=await e.validateEmail(this.config.storacha.email);this.storachaConnection=await i.K.connect({email:t})}catch(t){let e=t instanceof Error?t.message:"Unknown error";throw Error(`Failed to initialize connections: ${e}`)}}async closeConnections(){try{await this.storachaConnection?.disconnect(),this.s3Connection=null,this.storachaConnection=null}catch(t){let e=t instanceof Error?t.message:"Unknown error";throw Error(`Failed to close connections: ${e}`)}}getS3Connection(){if(!this.s3Connection)throw Error("S3 connection not initialized");return this.s3Connection}getStorachaConnection(){if(!this.storachaConnection)throw Error("Storacha connection not initialized");return this.storachaConnection}}r()}catch(e){r(e)}})},3474:(e,t,a)=>{a.d(t,{K:()=>r});class r{constructor(e,t){this.config=e,this.logger=t}async withRetry(e,t){let a=Error("No error details available");for(let r=1;r<=this.config.maxAttempts;r++)try{return await e()}catch(o){let e=o instanceof Error?o.message:"Unknown error";if(a=Error(e),this.logger.warn(`Attempt ${r}/${this.config.maxAttempts} failed for ${t}: ${e}`),r<this.config.maxAttempts){let e=this.calculateBackoff(r);await this.delay(e);continue}}throw Error(`Operation ${t} failed after ${this.config.maxAttempts} attempts: ${a.message}`)}calculateBackoff(e){return Math.min(this.config.backoffMs*Math.pow(2,e-1),this.config.maxBackoffMs)}delay(e){return new Promise(t=>setTimeout(t,e))}}},2202:(e,t,a)=>{a.d(t,{S:()=>o});var r=a(1841);class o{constructor(e,t){this.config=e,this.client=new r.S3Client({region:e.region,credentials:e.credentials??{accessKeyId:process.env.AWS_ACCESS_KEY_ID,secretAccessKey:process.env.AWS_SECRET_ACCESS_KEY}}),this.eventManager=t}async fetchFileFromS3(e){let t=new r.GetObjectCommand({Bucket:this.config.bucketName,Key:e}),a=await this.client.send(t),o=[],i=Number(a.ContentLength)||0,n=0;if(!a.Body)throw Error(`No body in response for file: ${e}`);for await(let t of(this.eventManager?.updateProgress({phase:"download"}),a.Body))o.push(t),n+=t.length,this.eventManager?.updateFileProgress(e,n,i,"download");return{buffer:Buffer.concat(o),fileName:e.split("/").pop()||e}}async listFilesInS3Directory(e){try{console.log(`Listing files in S3 directory: ${e}`);let t=new r.ListObjectsV2Command({Bucket:this.config.bucketName,Prefix:e}),a=await this.client.send(t);return a.Contents?a.Contents.map(e=>e.Key):[]}catch(e){throw console.error("Error listing files in S3 directory:",e),e}}async fetchFilesInBatches(e){let t=[],a=0;for(let t of e){let e=new r.GetObjectCommand({Bucket:this.config.bucketName,Key:t});a+=Number((await this.client.send(e)).ContentLength)||0}this.eventManager?.setTotalBytes(a,a);for(let a=0;a<e.length;a+=5){let r=e.slice(a,a+5);this.eventManager?.updateProgress({phase:"download",currentFile:`Batch ${Math.floor(a/5)+1}/${Math.ceil(e.length/5)}`});let o=await Promise.all(r.map(e=>this.fetchFileFromS3(e)));t.push(...o)}return t}}},1029:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.d(t,{K:()=>c});var o=a(5652),i=a(6932),n=a(3543),s=a(5142),l=e([o,i,n]);[o,i,n]=l.then?(await l)():l,s.config();class c{constructor(e){this.isUploading=!1,this.eventManager=e}async initialize(){this.client||(this.client=await (0,o.create)())}async validateEmail(e){if(!e||!e.includes("@"))throw Error("Invalid email format. Email must be in the format user@domain");return e}async initializeClient(){try{console.log("\uD83D\uDEE0 Initializing Storacha client...");let e=await (0,o.create)();console.log("\uD83D\uDD11 Logging in to Storacha...");let t=process.env.STORACHA_EMAIL;if(!t)throw Error("STORACHA_EMAIL environment variable is not set");let a=await this.validateEmail(t),r=await e.login(a);return console.log(`✅ Logged into Storacha with email: ${t}`),{client:e,account:r}}catch(e){throw console.error("❌ Error initializing client:",e),e}}async waitForPlanActivation(e){try{console.log("⏳ Waiting for payment plan activation..."),await e.plan.wait(),console.log("✅ Payment plan confirmed.")}catch(e){throw console.error("❌ Error waiting for plan activation:",e),e}}async uploadToStoracha(e,t){try{let{client:a,account:r}=await this.initializeClient();await this.waitForPlanActivation(r),console.log("\uD83D\uDD0D Fetching user's current space...");let o=await r.agent.getSpaceInfo();if(!o||!o.did)throw Error("❌ No space found! Please create a new space first.");await a.setCurrentSpace(o.did),console.log(`✅ Using existing space: ${o.did}`);let s={issuer:a.agent.issuer,with:o.did,proofs:a.proofs()},l=new File([e],t);console.log(`📤 Uploading file: ${t}...`);let c=await (0,i.uploadFile)(s,l,{onUploadProgress:e=>{this.eventManager?.updateUploadProgress({...e,phase:"upload"})},fetchWithUploadProgress:n.fetchWithUploadProgress});return console.log(`✅ File uploaded successfully! CID: ${c.toString()}`),{success:!0,cid:c.toString(),url:`https://${c.toString()}.ipfs.w3s.link`,size:e.length,status:"success"}}catch(e){return console.error("❌ Error uploading file to Storacha:",e),{success:!1,error:e instanceof Error?e.message:"Unknown error",status:"failed"}}}async uploadDirectoryToStoracha(e){if(this.isUploading)return{success:!1,error:"Upload already in progress",status:"failed"};this.isUploading=!0;try{await this.initialize();let{client:t,account:a}=await this.initializeClient();await this.waitForPlanActivation(a),console.log("\uD83D\uDD0D Fetching user's current space...");let r=await a.agent.getSpaceInfo();if(!r||!r.did)throw Error("❌ No space found! Please create a new space first.");await t.setCurrentSpace(r.did),console.log(`✅ Using existing space: ${r.did}`);let o=e.map(({buffer:e,fileName:t})=>new File([e],t)),s={issuer:t.agent.issuer,with:r.did,proofs:t.agent.proofs()},l=e.reduce((e,t)=>e+t.buffer.length,0),c=0,d=0;console.log(`📂 Uploading ${o.length} files as a directory (Total size: ${this.formatBytes(l)})...`),this.eventManager?.updateProgress({phase:"upload",uploadedBytes:0,totalUploadBytes:l,currentFile:"Starting directory upload...",totalFiles:o.length,completedFiles:0,percentage:0,uploadSpeed:0});let h=Date.now(),g=Date.now(),p=Date.now(),u=0,f=await (0,i.uploadDirectory)(s,o,{onUploadProgress:e=>{let t=Date.now();if(t-h>100){let a=e.loaded||0;a>d&&(c+=a-d,d=a),t-p>1e3&&(u=c/((t-g)/1e3),p=t);let r=c/l*100;console.log(`Debug: Upload progress - ${this.formatBytes(c)}/${this.formatBytes(l)} (${r.toFixed(1)}%) at ${this.formatBytes(u)}/s`),this.eventManager?.updateProgress({phase:"upload",uploadedBytes:c,totalUploadBytes:l,percentage:r,uploadSpeed:u,currentFile:`Uploading directory (${this.formatBytes(c)}/${this.formatBytes(l)})`}),h=t}},onShardStored:e=>{if(e&&"number"==typeof e.shardIndex&&"number"==typeof e.totalShards){let t=l/e.totalShards,a=Math.min((e.shardIndex+1)*t,l),r=a/l*100;console.log(`Debug: Shard ${e.shardIndex+1}/${e.totalShards} stored (${r.toFixed(1)}%)`),this.eventManager?.updateProgress({phase:"upload",uploadedBytes:a,totalUploadBytes:l,percentage:r,uploadSpeed:u,currentShardIndex:e.shardIndex,totalShards:e.totalShards,currentFile:`Processing shard ${e.shardIndex+1}/${e.totalShards}`}),a>c&&(c=a,d=a)}},fetchWithUploadProgress:n.fetchWithUploadProgress}),w=(Date.now()-g)/1e3,m=w>0?l/w:0;return this.eventManager?.updateProgress({phase:"upload",status:"completed",uploadedBytes:l,totalUploadBytes:l,percentage:100,uploadSpeed:m,currentFile:"Upload complete!",completedFiles:o.length}),console.log(`✅ Directory uploaded successfully! CID: ${f}`),{success:!0,cid:f.toString(),url:`https://${f}.ipfs.w3s.link`,size:l,status:"success"}}catch(e){return console.error("❌ Error uploading directory to Storacha:",e),this.eventManager?.updateProgress({phase:"upload",currentFile:"Upload failed!",errors:[{file:"directory",error:e}]}),{success:!1,error:e instanceof Error?e.message:"Unknown error",status:"failed"}}finally{this.isUploading=!1}}formatBytes(e){if(0===e)return"0 B";let t=Math.floor(Math.log(e)/Math.log(1024));return`${(e/Math.pow(1024,t)).toFixed(2)} ${["B","KB","MB","GB","TB"][t]}`}async createNewStorachaSpace(e){try{console.log(`🚀 Creating new Storacha space: ${e}...`);let{client:t,account:a}=await this.initializeClient();await this.waitForPlanActivation(a);let r=(await t.createSpace(e,{account:a})).did();return await t.setCurrentSpace(r),console.log(`✅ New space created and set as current: ${e} (DID: ${r})`),{success:!0,did:r,name:e}}catch(e){return console.error("❌ Error creating new Storacha space:",e),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}}static async connect(e){let t=new c;return await t.initialize(),await t.login(e.email),t}async disconnect(){this.client=null,this.account=null}async setCurrentSpaceByDID(e){try{console.log(`🔄 Setting current space to DID: ${e}...`);let{account:t,client:a}=await this.initializeClient(),r=await t.agent.getSpaceInfo();return console.log(`📍 Current Space: ${r.did}`),await a.setCurrentSpace(e),console.log(`✅ Successfully set current space to: ${e}`),{success:!0,did:e,name:e.split(":").pop()||""}}catch(e){return console.error("❌ Error setting current space by DID:",e),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}}async login(e){try{this.account=await this.client.login(e)}catch(e){throw Error(`Failed to login to Storacha: ${e}`)}}async uploadFilesInBatches(e){for(let t=0;t<e.length;t+=5){let a=e.slice(t,t+5);this.eventManager?.updateProgress({phase:"upload",currentFile:`Batch ${Math.floor(t/5)+1}/${Math.ceil(e.length/5)}`}),await Promise.all(a.map(e=>this.uploadToStoracha(e.buffer,e.fileName)))}}}r()}catch(e){r(e)}})},1476:(e,t,a)=>{a.d(t,{M:()=>r});class r{info(e,...t){console.log(`[INFO] ${e}`,...t)}error(e,t,...a){console.error(`[ERROR] ${e}`,t?.message||"",...a)}warn(e,...t){console.warn(`[WARN] ${e}`,...t)}debug(e,...t){console.debug(`[DEBUG] ${e}`,...t)}}},1152:(e,t,a)=>{a.d(t,{p:()=>n});let r=["Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega"],o=new Set;function i(){let e=Math.floor(Math.random()*r.length);return`${r[e]}-${Date.now()}`}function n(){let e=i();for(;o.has(e);)e=i();return o.add(e),e}}};var t=require("../../webpack-api-runtime.js");t.C(e);var a=t(t.s=5694);module.exports=a})();